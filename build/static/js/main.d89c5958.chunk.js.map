{"version":3,"sources":["store/reducers/calculateWage.js","store/reducers/index.js","store/index.js","components/DatePicker/index.js","controllers/Babysitter/index.js","App.js","index.js"],"names":["calculateWageEarned","startDateTime","bedtimeDateTime","endDateTime","endDateLimit","set","Date","hours","minutes","nightStart","midnight","wageEarned","start","wage","end","roundUp","reduce","acc","timeInSlot","slot","startDate","endDate","startInSlot","isWithinInterval","endInSlot","differenceInMinutes","isAfter","isBefore","Math","ceil","defaultState","selectStartDate","state","addHours","selectBedtime","selectEndDate","selectWageEarned","store","createStore","action","type","payload","DatePicker","time","updateFunction","onChange","utils","DateFnsUtils","TimePicker","value","onAccept","openTo","minutesStep","BabysitterController","dispatch","useDispatch","useSelector","bedtime","className","id","title","date","updateStartDate","updateBedtimeDate","updateEndDate","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d89c5958.chunk.js","sourcesContent":["import { differenceInMinutes, isBefore, set, isWithinInterval, isAfter, } from \"date-fns\";\r\n\r\n\r\nexport const calculateWageEarned = ({startDateTime, bedtimeDateTime, endDateTime}) => {\r\n  const endDateLimit = set(new Date(), { hours: 16, minutes: 0});\r\n  const nightStart = set(new Date(), { hours: 5, minutes: 0});\r\n  const midnight = set(new Date(), { hours: 12, minutes: 0});\r\n  const wages = [\r\n    { \r\n      start: nightStart,\r\n      wage: 12,\r\n      end: bedtimeDateTime,\r\n      roundUp: true,\r\n    },\r\n    { \r\n      start: bedtimeDateTime,\r\n      wage: 8,\r\n      end: midnight\r\n    },\r\n    { \r\n      start: midnight,\r\n      wage: 16, \r\n      end: endDateLimit,\r\n      roundUp: true,\r\n    },\r\n  ];\r\n  if (!startDateTime || !bedtimeDateTime || !endDateTime) return \"Invalid dates\";\r\n\r\n  const wageEarned = wages.reduce((acc, wage) => acc + timeInSlot(wage, startDateTime, endDateTime), 0);\r\n\r\n  return `wages earned= $${wageEarned}`;\r\n}\r\n\r\nconst timeInSlot = (slot, startDate, endDate) => {\r\n  const startInSlot = isWithinInterval(startDate, slot);\r\n  const endInSlot = isWithinInterval(endDate, slot);\r\n\r\n  let minutes = 0\r\n  if (startInSlot && endInSlot) {\r\n    minutes = differenceInMinutes(endDate, startDate);\r\n  } else if (startInSlot) {\r\n    minutes = differenceInMinutes(slot.end, startDate);\r\n  } else if (endInSlot) {\r\n    minutes = differenceInMinutes(endDate, slot.start);\r\n  } else if (isAfter(slot.start, startDate) && isBefore(slot.end, endDate)) {\r\n    minutes = differenceInMinutes(slot.end, slot.start);\r\n  }\r\n  \r\n  return (slot.roundUp ? Math.ceil(minutes / 60) : minutes / 60) * slot.wage;\r\n}","import { set, addHours } from \"date-fns\";\r\nimport { calculateWageEarned } from \"./calculateWage\"\r\n\r\n// Actions\r\nexport const UPDATE_START_DATE = \"update_start_date\";\r\nexport const UPDATE_BEDTIME_DATE = \"update_bedtime_date\";\r\nexport const UPDATE_END_DATE = \"update_end_date\";\r\n\r\nconst startDateTime = set(new Date(), { hours: 5, minutes: 0});\r\nconst bedtimeDateTime = set(new Date(), { hours: 9, minutes: 0});\r\nconst endDateTime = set(new Date(), { hours: 10, minutes: 0});\r\n\r\nconst defaultState = {\r\n  startDateTime,\r\n  bedtimeDateTime,\r\n  endDateTime,\r\n  wageEarned: calculateWageEarned(startDateTime, bedtimeDateTime, endDateTime),\r\n}\r\n\r\nexport const rootReducer = (store = defaultState, action) => {\r\n  switch(action.type) {\r\n    case UPDATE_BEDTIME_DATE: \r\n      return { \r\n        ...store,\r\n        bedtimeDateTime: addHours(action.payload, -12),\r\n      };\r\n    case UPDATE_START_DATE:\r\n      return { \r\n        ...store,\r\n        startDateTime: addHours(action.payload, -12)\r\n      };\r\n    case UPDATE_END_DATE:\r\n      return { \r\n        ...store,\r\n        endDateTime: addHours(action.payload, -12)\r\n      };\r\n    default: return store;\r\n  }\r\n}\r\n\r\n//Action generators\r\nexport const updateStartDate = (startDate) => ({ type: UPDATE_START_DATE, payload: startDate})\r\n\r\nexport const updateBedtimeDate = (endDate) => ({ type: UPDATE_BEDTIME_DATE, payload: endDate})\r\n\r\nexport const updateEndDate = (endDate) => ({ type: UPDATE_END_DATE, payload: endDate})\r\n\r\n//Selectors (offset hours here help clean up overnight changes)\r\nexport const selectStartDate = (state) => addHours(state.startDateTime, 12);\r\nexport const selectBedtime = (state) => addHours(state.bedtimeDateTime, 12);\r\nexport const selectEndDate = (state) => addHours(state.endDateTime, 12);\r\nexport const selectWageEarned = (store) => calculateWageEarned(store);\r\n","import { createStore } from \"redux\"\r\nimport { rootReducer } from \"./reducers\"\r\n\r\nexport const store = createStore(rootReducer);","import React from \"react\"\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {  TimePicker } from \"@material-ui/pickers\";\r\n\r\nexport const DatePicker = ({time, updateFunction = () => {}, onChange = () => {}}) => (\r\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n    <TimePicker  \r\n      value={time}\r\n      onChange={onChange}\r\n      onAccept={updateFunction}\r\n      openTo=\"hours\"\r\n      minutesStep={5}\r\n    />\r\n  </MuiPickersUtilsProvider>);","import React from \"react\";\r\nimport { DatePicker } from \"../../components/DatePicker/index.js\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { \r\n  updateBedtimeDate,\r\n  updateStartDate,\r\n  updateEndDate,\r\n  selectEndDate,\r\n  selectStartDate,\r\n  selectWageEarned,\r\n  selectBedtime,\r\n} from \"../../store/reducers/index\"\r\nimport \"./babysitter.css\"\r\n\r\nexport const BabysitterController = ()  =>{\r\n  const dispatch = useDispatch();\r\n  const startDate = useSelector(selectStartDate);\r\n  const bedtime = useSelector(selectBedtime);\r\n  const endDate = useSelector(selectEndDate);\r\n  const wageEarned = useSelector(selectWageEarned);\r\n\r\n  return (\r\n    <div className=\"display-items\">\r\n      <div id=\"start-date\" title=\"Start Time\">\r\n        <DatePicker time={startDate} updateFunction={(date) => dispatch(updateStartDate(date))} />\r\n      </div>\r\n      <div id=\"bedtime\" title=\"Bed Time\">\r\n        <DatePicker time={bedtime} updateFunction={(date) => dispatch(updateBedtimeDate(date))} />\r\n      </div>\r\n      <div id=\"end-date\" title=\"End Time\">\r\n        <DatePicker time={endDate} updateFunction={(date) => dispatch(updateEndDate(date))} />\r\n      </div>\r\n      <div id=\"display\" title=\"Display wage earned\">\r\n        {wageEarned}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { BabysitterController } from \"./controllers/Babysitter/index.js\"\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BabysitterController />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}